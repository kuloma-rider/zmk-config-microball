#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                        &kp T                                                          &kp Y        &kp U  &lt 5 I          &kp O                    &kp MINUS
&kp A             &kp S         &kp D         &kp F                        &kp G        &kp LS(LG(S))                      &mkp MB2       &kp H        &kp J  &kp K            &kp L                    &kp P
&mt LEFT_SHIFT Z  &kp X         &mt LCTRL C   &mt LEFT_ALT V               &kp B        &kp LC(SPACE)                      &kp SLASH      &kp B        &kp N  &mt RIGHT_ALT M  &mt RIGHT_CONTROL COMMA  &mt RIGHT_SHIFT PERIOD
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 5 INT_HENKAN  &lt 2 SPACE  &lt_to_layer_0 3 INT_MUHENKAN      &kp BACKSPACE  &lt 1 ENTER                                                   &lt 6 DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp ESCAPE            &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans            &kp NON_US_BACKSLASH                      &kp LC(F)  &kp LC(H)  &trans         &trans  &kp TILDE
&kp COLON             &kp SEMICOLON     &kp AT_SIGN        &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &trans      &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)      &trans  &trans
&mt LEFT_SHIFT GRAVE  &trans            &trans             &trans            &trans                &trans      &trans  &trans     &kp LC(A)  &kp LS(LC(L))  &trans  &trans
&trans                &trans            &trans             &trans            &trans                &trans      &trans  &trans                                       &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                               &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0
&mt LEFT_SHIFT F1  &kp F2        &kp F3        &kp F4        &kp F5   &kp F6       &kp BACKSLASH  &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&mt LEFT_SHIFT F7  &kp F8        &kp F9        &kp F10       &kp F11  &kp F12      &kp PERIOD     &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans             &trans        &trans        &trans        &trans   &trans       &trans         &trans                                                  &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &kp C_MUTE                           &trans  &trans          &kp UP_ARROW    &trans        &trans
&kp LEFT_SHIFT  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp C_VOLUME_UP  &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT     &mt RIGHT_CONTROL HOME
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &kp C_VOL_DN     &trans      &trans  &trans  &kp PAGE_UP     &kp PAGE_DOWN   &kp LEFT_WIN  &mt RIGHT_SHIFT END
&trans          &trans                  &trans          &trans                   &trans           &trans      &trans  &trans                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
